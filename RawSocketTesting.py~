import socket
import struct
import binascii

# the public network interface
#HOST = socket.gethostbyname(socket.gethostname())

# create a raw socket and bind it to the public interface
s = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.htons(0x0003))
#s.bind((HOST, 0))

# Include IP headers
#s.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)

# receive all packages
#s.ioctl(socket.SIO_RCVALL, socket.RCVALL_ON)

while(True):
	# receive a package
	packet = s.recvfrom(65565)
    
	#packet string from tuple
	packet = packet[0]

	#take first 14 characters for ethernet header
	eth_header = packet[0:14]
	eh = struct.unpack('!6s6sH', eth_header)
	eth_dest = binascii.hexlify(eh[0])
	eth_src = binascii.hexlify(eh[1])
	eth_type = eh[2]

	eth_output = 'MAC Dest : ' + str(eth_dest) + ' MAC Src : ' + str(eth_src) + ' Ethernet Type : ' + str(eth_type)
	print(eth_output)

	#IPv4
	if eth_type == 0x0800:
		#take first 20 characters for the ip header
		ip_header = packet[14:34]
		 
		#now unpack them :)
		iph = struct.unpack('!BBHHHBBH4s4s' , ip_header)
		 
		version_ihl = iph[0]
		version = version_ihl >> 4
		ihl = version_ihl & 0xF
		
		iph_length = ihl * 4
		iph_length = iph_length + 14
		 
		ttl = iph[5]
		protocol = iph[6]
		s_addr = socket.inet_ntoa(iph[8]);
		d_addr = socket.inet_ntoa(iph[9]);
		 
		#print ("IP")
		ip_output = 'Version : ' + str(version) + ' IP Header Length : ' + str(ihl) + ' TTL : ' + str(ttl) + ' Protocol : ' + str(protocol) + ' Source Address : ' + str(s_addr) + ' Destination Address : ' + str(d_addr)
		print (ip_output)

		if protocol == 6:
			tcp_header = packet[iph_length:iph_length+20]
		     
			#now unpack them :)
			tcph = struct.unpack('!HHLLBBHHH' , tcp_header)
		     
			source_port = tcph[0]
			dest_port = tcph[1]
			sequence = tcph[2]
			acknowledgement = tcph[3]
			doff_reserved = tcph[4]
			tcph_length = doff_reserved >> 4
		     
			#print("TCP")
			tcp_output = 'Source Port : ' + str(source_port) + ' Dest Port : ' + str(dest_port) + ' Sequence Number : ' + str(sequence) + ' Acknowledgement : ' + str(acknowledgement) + ' TCP header length : ' + str(tcph_length)
			print(tcp_output)        
		    
			h_size = iph_length + tcph_length * 4
			data_size = len(packet) - h_size
			     
			#get data from the packet
			data = packet[h_size:]
		     
			#check for http
			if dest_port == 80:
				#unpack http
				http = packet[iph_length+20:len(packet)]
				print(http)

			elif protocol == 17:
				udp_header = packet[iph_length:iph_length+8]
				udph = struct.unpack('!HHHH', udp_header);

				#unpacking
				source_port = udph[0]
				dest_port = udph[1]
				length = udph[2]
				checksum = udph[3]

				#print("UDP")
				udp_output = 'Source Port: ' + str(source_port) + ' Dest Port : ' + str(dest_port) + ' Length: ' + str(length) + ' Checksum : ' + str(checksum)
				print(udp_output)

		elif protocol == 1:
			icmp_header = packet[iph_length:iph_length+8]
			icmph = struct.unpack('!BBHHH', icmp_header);

			#unpacking
			icmp_type = icmph[0]
			icmp_code = icmph[1]
			icmp_checksum = icmph[2]
			icmp_identifier = icmph[3]
			icmp_seqnum = icmph[4]

			#print("ICMP")
			icmp_output = 'Type: ' + str(icmp_type) + ' Code: ' + str(icmp_code) + ' Checksum: ' + str(icmp_checksum)
			icmp_output = icmp_output + 'Identifier: ' + str(icmp_identifier) + ' Sequence Number: ' + str(icmp_seqnum)  
			print(icmp_output)      

	elif eth_type == 0x0806:    
		#ARP
		arp_packet = packet[14:42]
		arp_header = struct.unpack('!HHBBH6s4s6s4s', arp_packet)
		
		#unpacking
		hardware_type = arp_header[0]
		protocol_type = arp_header[1]
		hardware_size = arp_header[2]
		protocol_size = arp_header[3]
		opcode = arp_header[4]
		src_mac = binascii.hexlify(arp_header[5])
		src_ip = socket.inet_ntoa(arp_header[6])
		dest_mac = binascii.hexlify(arp_header[7])
		dest_ip = socket.inet_ntoa(arp_header[8])
		
		arp_output = 'Hardware Type: ' + str(hardware_type) + ' Protocol Type: ' + str(protocol_type) + ' Hardware Size: ' + str(hardware_size) + ' Protocol Size: ' + str(protocol_size) + ' Opcode: ' + str(opcode) + ' Src MAC: ' + str(src_mac) + ' Src IP: ' + str(src_ip) + ' Dest MAC: ' + str(dest_mac) + ' Dest IP: ' + str(dest_ip)
		print(arp_output)
